import numpy as np
from numpy import linalg, transpose
import math
import matplotlib.pyplot as plt


def calcular_raizes():
    a = float(input('• Entre com o valor de a: '))
    b = float(input('• Entre com o valor de b: '))
    c = float(input('• Entre com o valor de c: '))
    delta = (b ** 2) - (4 * a * c)
    x1 = (((-1) * b) + (math.sqrt(delta))) / (2 * a)
    x2 = (((-1) * b) - (math.sqrt(delta))) / (2 * a)
    print(f" ► As raízes da função apresentada são {x1} e {x2}")
    print("=-"*50)


def funcao_x():
    a = float(input("Digite uma valor para o a: "))
    b = float(input("Digite uma valor para o b: "))
    c = float(input("Digite uma valor para o c: "))
    x = float(input("Digite uma valor para o x: "))
    fx = ((a * (x ** 2)) + (b * x) + c)
    print(f" ► A função f({x}) é igual a {fx}")
    print("=-" * 50)


def vertice():
    a = float(input('• Entre com o valor de a: '))
    b = float(input('• Entre com o valor de b: '))
    c = float(input('• Entre com o valor de c: '))

    d = (b ** 2) - 4 * a * c

    xv = ((-1) * b) / (2 * a)
    yv = ((-1) * d) / (4 * a)

    print(f" ► Os vértices são {xv} e {yv}")
    if a < 0:
        print("► A função apresenta ponto de máximo")
    else:
        print("► A função tem ponto de mínimo!")
    print("=-" * 50)


def grafico_segundo():
    print("=" * 20)
    valor_a = float(input("Digite o valor de A: "))
    print("=" * 20)
    valor_b = float(input("Digite o valor de B: "))
    print("=" * 20)
    valor_c = float(input("Digite o valor de C: "))
    print("=" * 20)
    delta = ((valor_b) ** 2) - (4 * valor_a * valor_c)
    if delta < 0:
        raise Exception('Delta < 0 ')
    valor_x1 = (-(valor_b) + ((delta) ** (1 / 2))) / (2 * valor_a)
    valor_x2 = (-(valor_b) - ((delta) ** (1 / 2))) / (2 * valor_a)
    valor_xV = -(valor_b) / (2 * valor_a)
    valor_yV = -(delta) / (4 * valor_a)
    print("Delta=", delta)
    print("=" * 20)
    print("X1=", valor_x1)
    print("=" * 20)
    print("X2=", valor_x2)
    print("=" * 20)
    print("Xv=", valor_xV)
    print("=" * 20)
    print("Yv=", valor_yV)
    print("=" * 20)

    eixo_x = []
    eixo_y = []
    zero = []

    variacao = abs(valor_x1 - valor_x2)
    if variacao < 3:
        variacao = 3
    print(variacao)

    for x in np.arange(valor_x1 - variacao, valor_x2 + variacao, variacao / 100):
        y = valor_a * (x ** 2) + valor_b * (x) + valor_c
        eixo_x.append(x)
        eixo_y.append(y)
        zero.append(0.0)
    plt.plot(eixo_x, eixo_y, color="blue")
    plt.plot(eixo_x, zero, color="black")
    plt.show()


###################################################################################################################

# exponencial

def existencia():
    a = float(input("Digite o valor de a: "))
    if a > 0:
        print("A função dada existe!")
    else:
        print("Ela não existe!")
    print("=-" * 50)


def cres_decres():
    a = float(input("Digite o valor de a: "))
    if a > 1:
        print("Ela é uma função crescente!")
    else:
        print("Ela é uma função decrescente!!")
    print("=-" * 50)


def expo_x():
    a = float(input("Digite o valor de a: "))
    b = float(input("Digite o valor de b: "))
    x = float(input("Digite um valor para x: "))
    calculo = a * (b ** x)
    print(calculo)
    print("=-" * 50)


def grafic_expo():
    # funcao exponencial
    def funcaoExponencial(base, expoente):
        return (base ** expoente)

    # cria vetor de -7 a 7 , aumentando de 0,1
    vetorX = np.arange(-7, 7, 0.1)

    # coeficientes
    base = float(input("•Digite o valor da base: "))
    expoente = float(input("•Digite o valor do expoente: "))

    # encontra os valores de y para cada valor de x
    vetorY = []
    for expo in vetorX:
        vetorY.append(funcaoExponencial(base, expo))

    # prepara para salvar o grafico
    fig = plt.figure(figsize=(5, 5))

    # desenha o grafico
    plt.plot(vetorX, vetorY, label='Funcao Exponencial', color='g')

    plt.title(f'f(x) = {base}^{expoente}')
    plt.xlabel('eixo x')
    plt.ylabel('eixo y')
    plt.legend()
    plt.grid(True, which='both')
    plt.axhline(y=0, color='k')
    plt.axvline(x=0, color='k')
    plt.show()
    fig.savefig('FExp.png')

#########################################################################################
# matriz
def matriz():
    nlinha = int(input("Digite o número de linhas: "))
    ncoluna = int(input("Digite o número de colunas: "))
    matriz = [0] * nlinha
    for linha in range(nlinha):
        matriz[linha] = [0] * ncoluna
    print(matriz)
    for linha in range(nlinha):
        for coluna in range(ncoluna):
            matriz[linha][coluna] = float(input("Digite um número para compor a matriz: "))
    for linha in range(nlinha):
        for coluna in range(ncoluna):
            print(f"[{matriz[linha][coluna]}]", end='')
        print()
    print("=-" * 50)


def m_quadrada():
    nlinha = int(input("Digite o número de linhas: "))
    ncoluna = int(input("Digite o número de colunas: "))
    if nlinha == ncoluna:
        print("É uma matriz quadrada! ")
    else:
        print("Não é uma matriz quadrada! ")
    print("=-" * 50)


def determinante():
    nlinha = int(input("Digite o número de linhas: "))
    ncoluna = int(input("Digite o número de colunas: "))
    if nlinha == ncoluna:
        matriz = [0] * nlinha
        for linha in range(nlinha):
            matriz[linha] = [0] * ncoluna
        print(matriz)
        for linha in range(nlinha):
            for coluna in range(ncoluna):
                matriz[linha][coluna] = float(input("Digite um número para compor a matriz: "))
        for linha in range(nlinha):
            for coluna in range(ncoluna):
                print(f"[{matriz[linha][coluna]}]", end='')
            print()
        print("A determinante da matriz é: ")
        print(np.linalg.det(matriz))
    else:
        print("Matriz não é quadrada!")
    print("=-" * 50)

def multiplicacao():

    nlinha1 = int(input("Digite o número de linhas: "))
    ncoluna1 = int(input("Digite o número de colunas: "))
    matriz1 = [0] * nlinha1
    nlinha2 = int(input("Digite o número de linhas: "))
    ncoluna2 = int(input("Digite o número de colunas: "))
    matriz2 = [0] * nlinha2

    if ncoluna1 == nlinha2:
        for linha in range(nlinha1):
            matriz1[linha] = [0] * ncoluna1
        for linha in range(nlinha1):
            for coluna in range(ncoluna1):
                matriz1[linha][coluna] = float(input("Digite um número para compor a matriz: "))
        for linha in range(nlinha1):
            for coluna in range(ncoluna1):
                print(f"[{matriz1[linha][coluna]}]", end='')
            print()

        for linha in range(nlinha2):
            matriz2[linha] = [0] * ncoluna2
        for linha in range(nlinha2):
            for coluna in range(ncoluna2):
                matriz2[linha][coluna] = float(input("Digite um número para compor a matriz: "))
        for linha in range(nlinha2):
            for coluna in range(ncoluna2):
                print(f"[{matriz2[linha][coluna]}]", end='')
            print()
        result = np.dot(matriz1, matriz2)
        print("A multiplicação das matrizes é :")
        print(result)
    else:
        print("Matriz não pode efetuar a multiplicação!")
    print("=-" * 50)

def transposta():
    nlinha = int(input("Digite o número de linhas: "))
    ncoluna = int(input("Digite o número de colunas: "))
    matriz = [0] * nlinha
    for linha in range(nlinha):
        matriz[linha] = [0] * ncoluna
    print(matriz)
    for linha in range(nlinha):
        for coluna in range(ncoluna):
            matriz[linha][coluna] = float(input("Digite um número para compor a matriz: "))
    for linha in range(nlinha):
        for coluna in range(ncoluna):
            print(f"[{matriz[linha][coluna]}]", end='')
        print()
    print("A matriz transposta é :")
    print(transpose(matriz))
    print("=-" * 50)

print("=-"*50)
print("CALCULADORA BSI")
print(" ◄ O que deseja calcular:")
print("")
print("• Função segundo grau  [1]")
print("• Função exponencial   [2]")
print("• Matrizes             [3]")
calcular = int(input("► digite aqui: "))
print("=-"*50)
if calcular == 1:
    print("MENU Funções 2 grau")
    print("- Raizes          [1]")
    print("- f(x)            [2]"  )
    print("- V(x,y)          [3]")
    print("- Gerar Grafico   [4]")
    segundo_grau = int(input("O que quer fazer: "))
    print("=-" * 50)
    if segundo_grau == 1:
        calcular_raizes()
    elif segundo_grau == 2:
        funcao_x()
    elif segundo_grau == 3:
        vertice()
    elif segundo_grau == 4:
        grafico_segundo()
    else:
        print("número inválido!")
        calcular = int(input("► digite aqui: "))
if calcular == 2:
    print("MENU Funções Exponenciais")
    print("- Existência                          [1]")
    print("- crescente ou decrescente            [2]")
    print("- f(x)                                [3]")
    print("- Gerar Grafico                       [4]")
    print("=-" * 50)
    expo = int(input("o que quer fazer: "))
    if expo == 1:
        existencia()
    elif expo == 2:
        cres_decres()
    elif expo == 3:
        expo_x()
    elif expo == 4:
        grafic_expo()
    else:
        print("sla")

if calcular == 3:
    print("MENU Matrizes:")
    print("- matriz              [1]")
    print("- matriz quadrada     [2]")
    print("- determinante        [3]")
    print("- multiplicação       [4]")
    print("- transposta          [5]")
    m = int(input("o que quer fazer: "))
    print("=-" * 50)
    if m == 1:
        matriz()
    elif m == 2:
        m_quadrada()
    elif m == 3:
        determinante()
    elif m == 4:
        multiplicacao()
    elif m == 5:
        transposta()
